%% source points

x0 = -1; xend = 1;
y0 = x0; yend = xend;
z0 = x0; zend = xend;
xspan = [x0, xend];
yspan = [x0, xend];
zspan = [x0, xend];

lev = linspace(x0, xend, Nsource);
dx = (xend - x0)/(Nsource);
% dx = 0.02;
% boundary not included
% lev = x0+dx:dx:xend-dx;
% lev = x0:dx:xend;
% Nsource = length(lev);
ns = (Nsource)^3; %total number of source pts 

xyz = make_grid(lev, Nsource);


%% target points

% targ = [2.6; 2.6; 2.6];
% ntarg = size(targ,2);

ntarg = length(targ_x);
targ_yz = 0.5*ones(3, ntarg);
targ_yz(1,:) = targ_x;
targ = targ_yz;


% make many target points

% making cube for targets
% Nx_targ = 10;
% lev_targ = linspace(2, 4, Nx_targ);
% targ = make_grid(lev_targ, Nx_targ);
% ntarg = size(targ,2);

%% Ck vector
% charge points cj (R1 x N) 
% This is the perturbation term C times \hat{k}

Ck = ones(1, ns); % one for all now


%% analytic-kind solution
tol = 1e-10;
matlabV_all = zeros(3, ntarg);
matlabV_time_all = 0;
for t = 1:ntarg
    targ_t = targ(:,t);
    
    x0 = targ_t(1);
    y0 = targ_t(2);
    z0 = targ_t(3);
    [matlabV, matlabV_time] = fmm_test_analytic(Ck(1), x0, y0, z0, xspan, yspan, zspan, tol);
    
    matlabV_all(:,t) = matlabV;
    matlabV_time_all = matlabV_time_all + matlabV_time;
end


%% Timing for analytic solution + varying ns
tol = 1e-3;
matlab_t = zeros(1, length(Nsource_vec));
matlabV_low_tol = zeros(3, ntarg);
matlabV_time_all = 0;

for k = 1:length(Nsource_vec)
    for t = 1:ntarg
    targ_t = targ(:,t);
    
    x0 = targ_t(1);
    y0 = targ_t(2);
    z0 = targ_t(3);
    [matlabV, matlabV_time] = fmm_test_analytic(Ck(1), x0, y0, z0, xspan, yspan, zspan, tol);
    
    matlabV_low_tol(:,t) = matlabV;
    matlabV_time_all = matlabV_time_all + matlabV_time;
    end
end






